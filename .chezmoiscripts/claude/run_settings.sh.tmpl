{{ if eq .chezmoi.os "darwin" "linux" -}}
#!/bin/bash
set -euo pipefail

# Early exit if jq is not installed
if ! type jq >/dev/null 2>&1; then
    echo "‚ùå jq is not available. Exiting..."
    exit 1
fi

{{/* Inject Devin API Key dynamically */}}
{{- $devin_api_key := "" -}}
{{- if not .for_personal -}}
{{- $devin_api_key = onepasswordRead "op://Employee/DEVIN_API_KEY/credential" -}}
{{- end -}}

# Function to update settings in a JSON file
update_claude_settings() {
    local json_path="$1"
    local current_copy_path=$(mktemp)
    local modified_copy_path=$(mktemp)

    # Setup cleanup for temp files
    trap 'rm -f "$current_copy_path" "$modified_copy_path"' RETURN

    if [ ! -f "$json_path" ]; then
        echo "üöß $json_path not found. touching it to create an empty file..."
        mkdir -p "$(dirname "$json_path")"
        echo "{}" >"$json_path"
    fi

    cp "$json_path" "$current_copy_path"

    # shellcheck disable=all
    {{/* Omit some settings based on environment */}}
    {{- $omitted_keys := list -}}
    {{- if .for_personal -}}
        {{- $omitted_keys = append $omitted_keys "devin" -}}
    {{- else -}}
        {{- $omitted_keys = append $omitted_keys "deepwiki" -}}
    {{- end -}}

    {{/* Update Claude settings */}}
    {{- range $key, $value := .claude.settings -}}
        {{- if eq $key "mcpServers" -}}
        {{- $claude_mcp := dict -}}
            {{- range $mcp_key, $mcp_value := $value -}}
                {{- if has $mcp_key $omitted_keys -}}
                    {{- continue -}}
                {{- else -}}
                    {{- $claude_mcp = dict $mcp_key $mcp_value | merge $claude_mcp -}}
                {{- end -}}
            {{- end }}
    if ! jq --argjson mcpServers '{{ $claude_mcp | toJson | replaceAllRegex "DEVIN_API_KEY" $devin_api_key }}' '.mcpServers = $mcpServers' "$current_copy_path" >"$modified_copy_path"; then
        echo "‚ùå Failed to update mcpServers in $json_path"
        return 1
    fi
    mv "$modified_copy_path" "$current_copy_path"
        {{- else }}
    if ! jq --arg key "{{ $key }}" --argjson value '{{ $value | toJson }}' '.[$key] = $value' "$current_copy_path" >"$modified_copy_path"; then
        echo "‚ùå Failed to update {{ $key }} in $json_path"
        return 1
    fi
    mv "$modified_copy_path" "$current_copy_path"
        {{- end -}}
    {{- end }}

    {{- $settingsKeyLabels := .claude.settings | keys | sortAlpha | join ", " -}}
    # Replace the original file with the updated one
    if mv "$current_copy_path" "$json_path"; then
        return 0
    else
        echo "‚ùå Failed to replace $json_path"
        return 1
    fi
}

# Update settings for both claude and superclaude
{{ $settingsKeyLabels := .claude.settings | keys | sortAlpha | join ", " -}}
config_paths=(
    "$XDG_CONFIG_HOME/claude/.claude.json"
    "$XDG_CONFIG_HOME/superclaude/.claude.json"
)

for config_path in "${config_paths[@]}"; do
    if update_claude_settings "$config_path"; then
        echo "‚úÖ Successfully updated {{ $settingsKeyLabels }} in $config_path"
    else
        echo "‚ùå Failed to update settings in $config_path"
        exit 1
    fi
done
{{ end -}}
