{{- if eq .chezmoi.username "sushi" "sushichan044" -}}
[user]
{{- if .for_personal }}
signingkey = {{ onepasswordRead "op://dotfiles/Github-Commit-Sign/public key" }}
{{- else }}
signingkey = {{ onepasswordRead "op://Employee/Github-Commit-Sign/public key" }}
{{- end }}

[include]
path = ~/.config/git/config.d/user.github.conf
{{- end }}

[branch]
sort = -committerdate

[color]
ui = true
diff = auto
status = auto
branch = auto

[column]
ui = auto

[commit]
verbose = true

[core]
autocrlf = input
fsmonitor = true
ignorecase = false
pager = delta
untrackedCache = true

[delta]
navigate = true

[diff]
algorithm = histogram
colorMoved = true
external = difft
mnemonicPrefix = true
renames = true

[fetch]
prune = true
pruneTags = true
all = true

[feature]
experimental = true

[help]
autocorrect = prompt

[init]
defaultBranch = main

[interactive]
diffFilter = delta --color-only

[merge]
conflictStyle = zdiff3

[push]
autoSetupRemote = true
default = simple
followTags = true
useForceIfIncludes = true

[pull]
autoStash = true
rebase = true

[rebase]
autoStash = true
autoSquash = true
updateRefs = true

[rerere]
autoupdate = true
enabled = true

[tag]
sort = version:refname

[filter "lfs"]
process = git-lfs filter-process
required = true
clean = git-lfs clean -- %f
smudge = git-lfs smudge -- %f

[alias]
cz = "!f() { git-cz }; f"
clear-cache = "rm -r --cached ."
com = "!f() { remote_head=$(git symbolic-ref --quiet refs/remotes/origin/HEAD); remote_head=${remote_head#refs/remotes/origin/}; git checkout ${remote_head:-$(git rev-parse --symbolic --verify --quiet main || git rev-parse --symbolic --verify --quiet master)}; }; f"
fixit = "commit --amend --no-edit"
bk = "!f() { git switch -c $(git branch --show-current)-$(TZ=UTC-9 date +'%Y%m%d%H%M'); }; f"
f = "fetch"
s = "status"
# rebase current branch with origin/HEAD
rbm = "!f() { \
    CURRENT_BRANCH=$(git branch --show-current); \
    git stash push --include-untracked -m \"Auto stash before rebase of $CURRENT_BRANCH\"; \
    git fetch origin && git rebase origin/HEAD && git stash pop || { echo 'Conflict occurred during rebase. Please run $(git rebase --continue) and then $(git stash pop) after resolving conflicts.'; return 1; }; \
}; f"

# Worktree aliases
wt = worktree
wtl = "worktree list"

# Commit signing
# Not configured for .ostype == "linux"
{{ if eq .ostype "darwin" -}}
[commit]
gpgsign = true
[gpg]
format = ssh
[gpg "ssh"]
program = "/Applications/1Password.app/Contents/MacOS/op-ssh-sign"
{{ else if eq .ostype "wsl" -}}
[commit]
gpgsign = true
[gpg]
format = ssh
[gpg "ssh"]
program = "/mnt/c/Program Files/1Password/app/8/op-ssh-sign-wsl"
{{ else if eq .ostype "windows" -}}
[commit]
gpgsign = true
[gpg]
format = ssh
[gpg "ssh"]
program = "C:/Program Files/1Password/app/8/op-ssh-sign.exe"
{{ end -}}
